namespace Minerals.AutoInterfaces
{
    [Generator]
    public class InterfaceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoInterfaces.GenerateInterfaceAttribute",
                static (x, _) => true, //TODO: Optimize this only for public members
                static (x, _) => x
            );

            context.RegisterSourceOutput(generates, static (ctx, element) =>
            {
                string fileName = $"I{GeneratorHelpers.GetClassName(element)}.g.cs";
                ctx.AddSource(fileName, BuildInterface(element));
            });
        }

        public static SourceText BuildInterface(GeneratorAttributeSyntaxContext context)
        {
            var ns = GeneratorHelpers.GetNamespaceDeclaration(context);
            var compilation = SyntaxFactory.CompilationUnit();

            if (ns != null)
            {
                compilation = compilation.AddUsings(GeneratorHelpers.GetAllUsingDirectives(context).ToArray())
                    .AddMembers([ns.AddMembers([GeneratorHelpers.GetInterfaceDeclaration(context)])])
                    .WithLeadingTrivia(SyntaxFactory.Comment("// <auto-generated />\n"));
            }
            else
            {
                compilation = compilation.AddUsings(GeneratorHelpers.GetAllUsingDirectives(context).ToArray())
                    .AddMembers([GeneratorHelpers.GetInterfaceDeclaration(context)])
                    .WithLeadingTrivia(SyntaxFactory.Comment("// <auto-generated />"));
            }

            return SourceText.From(compilation.NormalizeWhitespace().ToFullString(), Encoding.UTF8);
        }
    }
}
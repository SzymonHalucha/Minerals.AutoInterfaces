using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis;
using Minerals.AutoInterfaces.Utilities;
using Minerals.AutoInterfaces.Objects;

namespace Minerals.AutoInterfaces
{
    [Generator]
    public class AutoInterfaceGenerator : IIncrementalGenerator
    {
        public const string AttributeName = "Minerals.AutoInterfaces.AutoInterfaceAttribute";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var interfaces = context.SyntaxProvider.ForAttributeWithMetadataName(AttributeName,
                static (x, _) => IsValidForInterfaceGeneration(x),
                static (x, _) => new InterfaceObject(x));

            context.RegisterSourceOutput(interfaces, static (ctx, obj) => ctx.AddSource(GetFileName(obj), GenerateInterface(obj)));
        }

        private static bool IsValidForInterfaceGeneration(SyntaxNode node)
        {
            return (node is StructDeclarationSyntax or RecordDeclarationSyntax)
                || (node is ClassDeclarationSyntax clss && !clss.Modifiers.Any(SyntaxKind.StaticKeyword));
        }

        private static string GetFileName(in InterfaceObject obj)
        {
            return !string.IsNullOrEmpty(obj.CustomName) ? $"{obj.CustomName}.g.cs" : $"I{obj.TypeName}.g.cs";
        }

        private static SourceText GenerateInterface(in InterfaceObject obj)
        {
            var builder = new CodeBuilder();
            builder.AppendAutoGeneratedHeader();
            AppendNamespace(builder, obj);

            builder.AppendAutoGeneratedAttributes(true);
            AppendDeclaration(builder, obj);
            AppendMembers(builder, obj);

            return SourceText.From(builder.CloseAllBlocks().ToString(), System.Text.Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder, in InterfaceObject obj)
        {
            if (!string.IsNullOrEmpty(obj.Namespace))
            {
                builder.WriteLine("namespace ").Write(obj.Namespace).OpenBlock();
            }
        }

        private static void AppendDeclaration(CodeBuilder builder, in InterfaceObject obj)
        {
            if (string.IsNullOrEmpty(obj.CustomName))
            {
                builder.WriteLine(obj.Modifier)
                    .Write(" interface I")
                    .Write(obj.TypeName)
                    .Write(obj.TypeArguments)
                    .OpenBlock();
            }
            else
            {
                builder.WriteLine(obj.Modifier)
                    .Write(" interface ")
                    .Write(obj.CustomName)
                    .Write(obj.TypeArguments)
                    .OpenBlock();
            }
        }

        private static void AppendMembers(CodeBuilder builder, in InterfaceObject obj)
        {
            foreach (var member in obj.Members)
            {
                builder.WriteLine(member);
            }
        }
    }
}
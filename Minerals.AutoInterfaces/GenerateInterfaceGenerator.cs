namespace Minerals.AutoInterfaces
{
    [Generator]
    public class GenerateInterfaceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoInterfaces.GenerateInterfaceAttribute",
                static (x, _) => x is TypeDeclarationSyntax,
                static (x, _) => new AttributeObject(x)
            );

            context.RegisterSourceOutput(generates, static (ctx, element) =>
            {
                string fileName = element.CustomName != string.Empty ? $"{element.CustomName}.g.cs" : $"I{element.Name}.g.cs";
                ctx.AddSource(fileName, GenerateInterface(element));
            });
        }

        private static SourceText GenerateInterface(AttributeObject attrObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendUsings(builder, attrObj);
            AppendNamespace(builder, attrObj);

            builder.AddAutoGeneratedAttributes(typeof(InterfaceDeclarationSyntax));
            AppendInterface(builder, attrObj);
            AppendPublicMembers(builder, attrObj);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendUsings(CodeBuilder builder, AttributeObject attrObj)
        {
            builder.WriteIteration(attrObj.Usings, (builder, item, next) =>
            {
                builder.WriteLine("using ").Write(item).Write(";");
                builder.If(!next)?.NewLine();
            });
        }

        private static void AppendNamespace(CodeBuilder builder, AttributeObject attrObj)
        {
            if (attrObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ").Write(attrObj.Namespace).OpenBlock();
            }
        }

        private static void AppendInterface(CodeBuilder builder, AttributeObject attrObj)
        {
            var name = attrObj.CustomName != string.Empty ? attrObj.CustomName : $"I{attrObj.Name}";
            builder.WriteLine(attrObj.AccessModifier).Write(" interface ").Write(name).OpenBlock();
        }

        private static void AppendPublicMembers(CodeBuilder builder, AttributeObject attrObj)
        {
            foreach (var member in attrObj.PublicMembers)
            {
                builder.NewLine();
                builder.WriteIteration(member, (builder1, item, next) =>
                {
                    builder1.Write(item);
                });
            }
        }
    }
}